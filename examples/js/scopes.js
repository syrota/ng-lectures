
// Области видимости в JS
// ----------------------------------------------------------


// ----------------------------------------------------------
// 1. if (do, switch, while, repeat, for, try) {}
// ----------------------------------------------------------

// *I*
var x = 1;
console.log('1. x=', x); // -> 1
if (2 > 1) {
    // хоть этот блок и находится между {}
    // *II*
    var x = 2;
    // но var не создает новую переменную внутри этого блока.
    // var x переопределяет x, объявленный ранее
    console.log('2. x=', x); // -> 2
}
console.log('3. x=', x); // -> 2

// По факту - этод код аналогичен:
/*
    var x;
    x = 1;
    ...
    if (...) {
        x = 2;
    }
    ...
 */

// ----------------------------------------------------------
// 2. Функции - единственное, что влияет на области видимости
// ----------------------------------------------------------

function f() {
    // здесь var x означает, что x будет доступен ТОЛЬКО в пределах этой функции
    var x = 10;
    console.log('4. x=', x); // -> 10
}
f();
// а наш x, объявленный ранее останется не тронутым
console.log('5. x=', x); // -> 2


// ----------------------------------------------------------
// 3. Ключевое слово var - объявляет переменную.
// ----------------------------------------------------------
function g() {
    // Здесь не определяется x (нет ключевого слова var)
    // *III*
    x = 20;
    // Поэтому мы обращаемся к всё тому же x *I* который был переопределен в *II*
    console.log('6. x=', x); // -> 20
}
g();
console.log('7. x=', x); // -> 20


// ----------------------------------------------------------
// 4. Замыкания
// ----------------------------------------------------------
function complex() {
    // Здесь x доступен только в пределах ф-ции complex
    var x = 0;
    return function () {
        // А эта безымянная функция тоже находится в пределах фунции complex,
        // в которой "виден" x - а значит, у нее тоже есть доступ ко внутреннему x.
        console.log('x=', x++);
        // Говорят, что эта внутренняя ф-ция "ЗАМЫКАЕТ ПЕРЕМЕННУЮ x"
        //                                    ---------------------
    };
}
var smth = complex();
smth(); // -> 0
smth(); // -> 1

// наш x, измененный в *III*
console.log(x); // -> 20


// ----------------------------------------------------------
// 5. Самовызыващаяся функция и замыкания
// ----------------------------------------------------------
// Часто, для создания новой области видимости ..
var smthMore = (function () { // .. мы объявляем функцию ..
    var x = 0;
    return function /* IV */ () {
        console.log(x++);
    };
} /* конец объявления */)(); // .. и тут же вызываем ее!
// smthMore - это ф-ция *IV*
smthMore(); // -> 0
smthMore(); // -> 1


// ----------------------------------------------------------
// Обычно, пример выше используется для обрамления js-файлов.
// В начале файла:
(function () {
    'use strict';

    // .. здесь наш основной код ...
    // все переменные, объявленные здесь (var) будут видны только здесь
    // и мы можем не переживать за то, что что-то лишнее попадет в глобальную область

// в конце файла ..
})();
// .. сразу вызываем эту же ф-цию

